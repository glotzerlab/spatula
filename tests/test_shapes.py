import coxeter
import freud
import numpy as np
import pytest

import pgop

cutoff = 0.99

n_dict = {
    3: "Triangular",
    4: "Square",
    5: "Pentagonal",
    6: "Hexagonal",
    7: "Heptagonal",
    8: "Octagonal",
    9: "Nonagonal",
    10: "Decagonal",
}


pgop_dict = dict()


pgop.util.set_num_threads(1)


def get_shape_sys_nlist(vertices):
    """Get a neighbor list of a shape.

    The neighbor list has a single point with all vertices as neighbors.
    """
    # shape = coxeter.shapes.ConvexPolyhedron(vertices)
    # shape.centroid = (0.0, 0.0, 0.0)
    # vertices = shape.vertices
    query_point_indices = np.zeros(len(vertices), dtype=int)
    point_indices = np.arange(0, len(vertices), dtype=int)
    # compute bond vectors between from query points to points
    vectors = vertices[point_indices] - vertices[query_point_indices]
    distances = np.linalg.norm(vertices, axis=1)
    return (
        (freud.Box.cube(2.1 * np.max(distances)), vertices),
        freud.locality.NeighborList.from_arrays(
            1, len(vertices), query_point_indices, point_indices, vectors
        ),
    )


def check_symmetry(symmetry, vertices):
    """Determine whether given shape have a specified symmetry.

    Parameters
    ----------
    symmetry: str
        The symmetry to test for.
    vertices: :math:`(N, 3)` numpy.ndarray of floats
        The vertices of the shape
    threshold: float
        The threshold below which ``check_symmetry`` returns ``False`` for
        ``has_symmetry == True`` and above which ``check_symmetry`` returns
        ``False`` for ``has_symmetry == False``.
    has_symmetry: bool, optional
        Whether to test if the shape has or does not have the symmetry.
    """
    optimizer = pgop.optimize.Union.with_step_gradient_descent(
        pgop.optimize.Mesh.from_grid(n_angles=20, n_axes=5), max_iter=100
    )
    op_compute = pgop.PGOP("fisher", [symmetry], optimizer, kappa=20.0)

    system, nlist = get_shape_sys_nlist(vertices)
    op_compute.compute(system, nlist, query_points=np.zeros((1, 3)), m=13, max_l=12)
    return op_compute.pgop[0]


def get_pyramid(n: int) -> np.ndarray:
    base = coxeter.families.RegularNGonFamily().get_shape(n).vertices
    # Need to offset polygon to make dihedral order low for testing.
    return (
        f"Pyramid({n})",
        np.concatenate((base - np.array([0.0, 0.0, -0.5]), [[0.0, 0.0, 3.0]])),
    )


def get_bipyramid(n: int) -> np.ndarray:
    base = coxeter.families.RegularNGonFamily().get_shape(n).vertices
    return (
        f"Bipyramid({n})",
        np.concatenate((base, [[0.0, 0.0, 3.0], [0.0, 0.0, -3.0]])),
    )


def parse_shape_values(
    a: str | tuple[str, np.ndarray],
) -> tuple[str, np.ndarray]:
    if isinstance(a, tuple):
        return a
    family, shape = a.split(".")
    if shape.isdigit():
        shape = int(shape)

    vertices = getattr(coxeter.families, family).get_shape(shape).vertices
    return shape, vertices


def _id_func(value):
    if isinstance(value, str):
        return value
    elif isinstance(value, int):
        return f"NGon{value}"
    return ""


# TODO later:
# T : Propello Tetrahedron
# O : Propello Cube, Propello Octahedron
# I : Propello Dodecahedron, Propello Icosahedron
# Dnd : Trapezohedron
###################################################
# TODO: add other options for shapes of interest
# The vertices found in this dictionary for all these shapes were taken from http://dmccooey.com/polyhedra/Simplest.html
shape_symmetries = {
    "C1": [
        (
            "vertices",
            [
                [
                    1.56922900989136486079919529624,
                    0.127344173132779220661025515340,
                    -0.594246684979361531856095101193,
                ],
                [
                    0.0544154317961383030163066010436,
                    -0.947594490792603122917402692721,
                    -0.594246684979361531856095101193,
                ],
                [
                    -1.67017858435830105053903440232,
                    0.0,
                    -0.594246684979361531856095101193,
                ],
                [
                    -0.0213946139374397854092095434663,
                    0.905939944266888642915620773436,
                    -0.594246684979361531856095101193,
                ],
                [
                    0.408714532008138679156653441174,
                    -0.984198346940939589795611220376,
                    0.362199783826854559024170380756,
                ],
                [
                    -0.0120908032100600645529433979780,
                    1.16488491635665498242827880542,
                    0.788799869882532888666060905952,
                ],
                [
                    -0.384754129324100147766981384357,
                    -0.433371335880031688698557665178,
                    1.05712424949451132235936641797,
                ],
            ],
        )
    ],
    "Ci": [
        (
            "vertices",
            [
                [1.189207115002721, 0.0, 1.0],
                [-1.189207115002721, 0.0, -1.0],
                [-0.49258571550470803, 0.0, 1.0],
                [0.49258571550470803, 0.0, -1.0],
                [-0.8408964152537145, 0.49258571550470803, 0.41421356237309503],
                [0.8408964152537145, -0.49258571550470803, -0.41421356237309503],
                [-0.3483106997490065, -1.189207115002721, 0.41421356237309503],
                [0.3483106997490065, 1.189207115002721, -0.41421356237309503],
                [0.5946035575013605, -0.8408964152537145, 0.0],
                [-0.5946035575013605, 0.8408964152537145, 0.0],
            ],
        )
    ],
    "Cs": [
        (
            "vertices",
            [
                [1.3737233664112654, -0.553529398617591, 0.8328296373605156],
                [-1.3737233664112654, -0.553529398617591, 0.8328296373605156],
                [0.5049089371450616, -0.553529398617591, -0.8328296373605156],
                [-0.5049089371450616, -0.553529398617591, -0.8328296373605156],
                [0.0, 0.5401563613890422, 0.9252962109065457],
                [0.0, 2.2892449735263116, -1.258960428697956],
            ],
        )
    ],
    "C2": [
        (
            "vertices",
            [
                [0.47895290007454705, 0.6092375000865723, 1.0],
                [-0.47895290007454705, -0.6092375000865723, 1.0],
                [1.5950044824476632, 0.0, -1.0],
                [-1.5950044824476632, 0.0, -1.0],
                [0.0, 1.13589310962197, -0.11972592295680519],
                [0.0, -1.13589310962197, -0.11972592295680519],
            ],
        )
    ],
    "C3": [
        (
            "vertices",
            [
                [0.09721493414474791, 0.8917128617235874, 0.8937837306664239],
                [-0.8208534582063212, -0.3616658282652108, 0.8937837306664239],
                [0.7236385240615733, -0.5300470334583767, 0.8937837306664239],
                [1.222667862618902, 0.0, -0.7913727468328255],
                [-0.611333931309451, 1.058861429418791, -0.7913727468328255],
                [-0.611333931309451, -1.058861429418791, -0.7913727468328255],
                [-1.0367052338386331, 0.0, -0.08116122495760766],
                [0.5183526169193166, -0.8978130687405432, -0.08116122495760766],
                [0.5183526169193166, 0.8978130687405432, -0.08116122495760766],
            ],
        )
    ],
    "C4": [
        (
            "vertices",
            [
                [0.9020768831634525, 0.28480944998815594, 0.7433508169295151],
                [-0.9020768831634525, -0.28480944998815594, 0.7433508169295151],
                [0.28480944998815594, -0.9020768831634525, 0.7433508169295151],
                [-0.28480944998815594, 0.9020768831634525, 0.7433508169295151],
                [0.7863247436800825, 0.7863247436800825, -0.6178134002079047],
                [0.7863247436800825, -0.7863247436800825, -0.6178134002079047],
                [-0.7863247436800825, 0.7863247436800825, -0.6178134002079047],
                [-0.7863247436800825, -0.7863247436800825, -0.6178134002079047],
                [1.017425061294311, 0.0, -0.0692776715108155],
                [-1.017425061294311, 0.0, -0.0692776715108155],
                [0.0, 1.017425061294311, -0.0692776715108155],
                [0.0, -1.017425061294311, -0.0692776715108155],
            ],
        )
    ],
    "C2h": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.618033988749895],
                [0.0, 0.0, -1.618033988749895],
                [0.0, 0.9717365435132913, 0.38196601125010515],
                [0.0, -0.9717365435132913, -0.38196601125010515],
                [1.0, 0.7861513777574233, 0.0],
                [1.0, -0.7861513777574233, 0.0],
                [-1.0, 0.7861513777574233, 0.0],
                [-1.0, -0.7861513777574233, 0.0],
            ],
        )
    ],
    "C2v": [
        (
            "vertices",
            [
                [0.0, 1.0745841941261967, 1.0],
                [0.0, -1.0745841941261967, 1.0],
                [1.6677004630016656, 0.0, -0.5519907530258161],
                [-1.6677004630016656, 0.0, -0.5519907530258161],
                [0.0, 0.9628473112416752, -0.5519907530258161],
                [0.0, -0.9628473112416752, -0.5519907530258161],
            ],
        )
    ],
    "C3v": [
        (
            "vertices",
            [
                [1.0, -1.0, 1.0],
                [-1.0, 1.0, 1.0],
                [1.0, 1.0, -1.0],
                [-1.0, -0.3333333333333333, -0.3333333333333333],
                [-0.3333333333333333, -1.0, -0.3333333333333333],
                [-0.3333333333333333, -0.3333333333333333, -1.0],
                [0.6, 0.6, 0.6],
            ],
        )
    ],
    "S4": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.176614197732676],
                [0.0, 0.0, -1.176614197732676],
                [0.36031346070627496, 0.6612064329575712, 0.7097370431606547],
                [-0.36031346070627496, -0.6612064329575712, 0.7097370431606547],
                [0.6612064329575712, -0.36031346070627496, -0.7097370431606547],
                [-0.6612064329575712, 0.36031346070627496, -0.7097370431606547],
                [1.4142135623730951, 0.0, 0.2997778728622828],
                [-1.4142135623730951, 0.0, 0.2997778728622828],
                [0.0, 1.4142135623730951, -0.2997778728622828],
                [0.0, -1.4142135623730951, -0.2997778728622828],
            ],
        )
    ],
    "S6": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.5784071969468327],
                [0.0, 0.0, -1.5784071969468327],
                [-0.8364985495055208, -0.31981873553238954, 0.48474417163591016],
                [0.8364985495055208, 0.31981873553238954, -0.48474417163591016],
                [0.6952204243300266, -0.5645196263344211, 0.48474417163591016],
                [-0.6952204243300266, 0.5645196263344211, -0.48474417163591016],
                [0.14127812517549415, 0.8843383618668106, 0.48474417163591016],
                [-0.14127812517549415, -0.8843383618668106, -0.48474417163591016],
                [1.1547005383792515, 0.0, 0.16826806462758645],
                [-1.1547005383792515, 0.0, -0.16826806462758645],
                [-0.5773502691896257, 1.0, 0.16826806462758645],
                [0.5773502691896257, 1.0, -0.16826806462758645],
                [-0.5773502691896257, -1.0, 0.16826806462758645],
                [0.5773502691896257, -1.0, -0.16826806462758645],
            ],
        )
    ],
    "D2": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.2078882314892923],
                [0.0, 0.0, -1.2078882314892923],
                [0.20678349452781558, -0.8278911690090963, 0.6297684119865748],
                [0.20678349452781558, 0.8278911690090963, -0.6297684119865748],
                [-0.20678349452781558, 0.8278911690090963, 0.6297684119865748],
                [-0.20678349452781558, -0.8278911690090963, -0.6297684119865748],
                [1.0, 0.8278911690090963, 0.3283484699963385],
                [1.0, -0.8278911690090963, -0.3283484699963385],
                [-1.0, -0.8278911690090963, 0.3283484699963385],
                [-1.0, 0.8278911690090963, -0.3283484699963385],
            ],
        )
    ],
    "D3": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.1491020339707478],
                [0.21163171332200198, 0.24385641862467136, -1.0],
                [-0.21163171332200198, -0.24385641862467136, -1.0],
                [0.21163171332200198, 0.744097194472103, 0.7111858534048582],
                [-0.21163171332200198, -0.744097194472103, 0.7111858534048582],
                [0.0, 0.9951515529590366, -0.5745510169853739],
                [0.0, -0.9951515529590366, -0.5745510169853739],
                [0.21163171332200198, -0.9879536130967743, 0.2888141465951419],
                [-0.21163171332200198, 0.9879536130967743, 0.2888141465951419],
                [2.029963793177167, 0.0, 0.0],
                [-2.029963793177167, 0.0, 0.0],
            ],
        )
    ],
    "D2v": [
        (
            "vertices",
            [
                [1.0, 0.0, 1.0],
                [-1.0, 0.0, 1.0],
                [0.0, 1.0, -1.0],
                [0.0, -1.0, -1.0],
                [1.0, 0.0, -0.5],
                [-1.0, 0.0, -0.5],
                [0.0, 1.0, 0.5],
                [0.0, -1.0, 0.5],
            ],
        )
    ],
    "D3v": [
        (
            "vertices",
            [
                [0.0, 0.0, 1.4142135623730951],
                [0.0, 0.0, -1.4142135623730951],
                [1.4142135623730951, 0.0, 0.0],
                [-1.4142135623730951, 0.0, 0.0],
                [0.0, 1.4142135623730951, 0.0],
                [0.0, -1.4142135623730951, 0.0],
                [0.585786437626905, 0.585786437626905, 0.585786437626905],
                [-0.585786437626905, -0.585786437626905, -0.585786437626905],
            ],
        )
    ],
    "D4v": [
        (
            "Square Antiprism",
            [
                [0.7653668647301796, 0.7653668647301796, 0.6435942529055826],
                [0.7653668647301796, -0.7653668647301796, 0.6435942529055826],
                [-0.7653668647301796, 0.7653668647301796, 0.6435942529055826],
                [-0.7653668647301796, -0.7653668647301796, 0.6435942529055826],
                [1.082392200292394, 0.0, -0.6435942529055826],
                [-1.082392200292394, 0.0, -0.6435942529055826],
                [0.0, 1.082392200292394, -0.6435942529055826],
                [0.0, -1.082392200292394, -0.6435942529055826],
            ],
        )
    ],
    "D5v": [
        (
            "Pentagonal Antiprism",
            [
                [0.6180339887498949, 0.0, 1.0],
                [0.6180339887498949, 0.0, -1.0],
                [-0.6180339887498949, 0.0, 1.0],
                [-0.6180339887498949, 0.0, -1.0],
                [0.0, 1.0, 0.6180339887498949],
                [0.0, 1.0, -0.6180339887498949],
                [0.0, -1.0, 0.6180339887498949],
                [0.0, -1.0, -0.6180339887498949],
                [1.0, 0.6180339887498949, 0.0],
                [-1.0, -0.6180339887498949, 0.0],
            ],
        )
    ],
    "D6v": [
        (
            "Hexagonal Antiprism",
            [
                [1.035276180410083, 0.0, 0.4428909828689583],
                [-1.035276180410083, 0.0, 0.4428909828689583],
                [0.5176380902050415, 0.8965754721680536, 0.4428909828689583],
                [0.5176380902050415, -0.8965754721680536, 0.4428909828689583],
                [-0.5176380902050415, 0.8965754721680536, 0.4428909828689583],
                [-0.5176380902050415, -0.8965754721680536, 0.4428909828689583],
                [0.8965754721680536, 0.5176380902050415, -0.4428909828689583],
                [0.8965754721680536, -0.5176380902050415, -0.4428909828689583],
                [-0.8965754721680536, 0.5176380902050415, -0.4428909828689583],
                [-0.8965754721680536, -0.5176380902050415, -0.4428909828689583],
                [0.0, 1.035276180410083, -0.4428909828689583],
                [0.0, -1.035276180410083, -0.4428909828689583],
            ],
        )
    ],
    "T": [
        (
            "Propello Tetrahedron",
            [
                [0.5097553324933856, 0.13968058199610653, 1.0],
                [0.5097553324933856, -0.13968058199610653, -1.0],
                [-0.5097553324933856, -0.13968058199610653, 1.0],
                [-0.5097553324933856, 0.13968058199610653, -1.0],
                [1.0, 0.5097553324933856, 0.13968058199610653],
                [1.0, -0.5097553324933856, -0.13968058199610653],
                [-1.0, -0.5097553324933856, 0.13968058199610653],
                [-1.0, 0.5097553324933856, -0.13968058199610653],
                [0.13968058199610653, 1.0, 0.5097553324933856],
                [0.13968058199610653, -1.0, -0.5097553324933856],
                [-0.13968058199610653, -1.0, 0.5097553324933856],
                [-0.13968058199610653, 1.0, -0.5097553324933856],
                [0.6062678708614785, -0.6062678708614785, 0.6062678708614785],
                [0.6062678708614785, 0.6062678708614785, -0.6062678708614785],
                [-0.6062678708614785, 0.6062678708614785, 0.6062678708614785],
                [-0.6062678708614785, -0.6062678708614785, -0.6062678708614785],
            ],
        )
    ],
    "Th": [
        (
            "vertices",
            [
                [0.41421356237309503, 0.0, 1.0],
                [0.41421356237309503, 0.0, -1.0],
                [-0.41421356237309503, 0.0, 1.0],
                [-0.41421356237309503, 0.0, -1.0],
                [1.0, 0.41421356237309503, 0.0],
                [1.0, -0.41421356237309503, 0.0],
                [-1.0, 0.41421356237309503, 0.0],
                [-1.0, -0.41421356237309503, 0.0],
                [0.0, 1.0, 0.41421356237309503],
                [0.0, 1.0, -0.41421356237309503],
                [0.0, -1.0, 0.41421356237309503],
                [0.0, -1.0, -0.41421356237309503],
                [0.0, 0.5224077499274828, 0.8918058124456122],
                [0.0, 0.5224077499274828, -0.8918058124456122],
                [0.0, -0.5224077499274828, 0.8918058124456122],
                [0.0, -0.5224077499274828, -0.8918058124456122],
                [0.8918058124456122, 0.0, 0.5224077499274828],
                [0.8918058124456122, 0.0, -0.5224077499274828],
                [-0.8918058124456122, 0.0, 0.5224077499274828],
                [-0.8918058124456122, 0.0, -0.5224077499274828],
                [0.5224077499274828, 0.8918058124456122, 0.0],
                [0.5224077499274828, -0.8918058124456122, 0.0],
                [-0.5224077499274828, 0.8918058124456122, 0.0],
                [-0.5224077499274828, -0.8918058124456122, 0.0],
            ],
        )
    ],
    "Td": ["PlatonicFamily.Tetrahedron"],
    "O": [
        "ArchimedeanFamily.Snub Cuboctahedron",
        "CatalanFamily.Pentagonal Icositetrahedron",
    ],
    "Oh": ["PlatonicFamily.Octahedron", "PlatonicFamily.Cube"],
    "I": [
        "ArchimedeanFamily.Snub Icosidodecahedron",
        "CatalanFamily.Pentagonal Hexecontahedron",
    ],
    "Ih": ["PlatonicFamily.Icosahedron", "PlatonicFamily.Dodecahedron"],
}
shape_symmetries.update({f"C{n}v": [get_pyramid(n)] for n in range(3, 13)})
shape_symmetries.update({f"D{n}h": [get_bipyramid(n)] for n in range(3, 13)})
shape_symmetries.update(
    {f"D{n}h": [f"PrismAntiprismFamily.{n_dict[n]} Prism"] for n in range(3, 11)}
)
shape_symmetries.update(
    {f"D{n}d": [f"PrismAntiprismFamily.{n_dict[n]} Antiprism"] for n in range(3, 11)}
)


@pytest.mark.parametrize(
    "symmetry, shape, vertices",
    (
        (sym, shape, vertices)
        for sym, shapes in shape_symmetries.items()
        for shape, vertices in map(parse_shape_values, shapes)
    ),
    ids=_id_func,
)
def test_symmetries(symmetry, shape, vertices):
    op = check_symmetry(symmetry=symmetry, vertices=vertices)
    assert op >= cutoff


non_shape_symmetries = {
    "O": ["PlatonicFamily.Tetrahedron", "PlatonicFamily.Icosahedron"],
    "Oh": ["PlatonicFamily.Tetrahedron", "PlatonicFamily.Icosahedron"],
    "T": [get_pyramid(5), get_bipyramid(5)],
    "I": ["PlatonicFamily.Octahedron"],
    "Ih": ["PlatonicFamily.Octahedron"],
}
# Symmetries are carefully chosen here as due to rotations and partial ordering
# meeting the threshold can be difficult here.
cyclic_non_symmetry = {
    2: 3,
    3: 4,
    4: 5,
    5: 3,
    6: 3,
    7: 4,
    8: 3,
    9: 4,
    10: 4,
    11: 5,
    12: 5,
}
non_shape_symmetries.update(
    {f"C{i}": [f"RegularNGonFamily.{cyclic_non_symmetry[i]}"] for i in range(3, 13)}
)
non_shape_symmetries.update({f"D{i}": [get_pyramid(i)] for i in range(3, 13)})
non_shape_symmetries.update(
    {f"D{i}": [get_bipyramid(cyclic_non_symmetry[i])] for i in range(3, 13)}
)


@pytest.mark.parametrize(
    "symmetry, shape, vertices",
    (
        (sym, shape, vertices)
        for sym, shapes in non_shape_symmetries.items()
        for shape, vertices in map(parse_shape_values, shapes)
    ),
    ids=_id_func,
)
def test_no_symmetries(symmetry, shape, vertices):
    op = check_symmetry(symmetry=symmetry, vertices=vertices)
    assert op < 0.8
